<section xml:id="sec_approximating_area_using_approximateint">
  <title>Approximating the Area Under a Function Using ApproximateInt</title>
  <idx><h>integral approximation</h><h>ApproximateInt</h></idx>
  <idx><h>integral approximation</h><h>ApproximateInt!method</h></idx>
  <idx><h>integral approximation</h><h>ApproximateInt!output options</h></idx>
  <idx><h>integral approximation</h><h>ApproximateInt!partition</h></idx>
  <p>
    To use the <c>ApproximateInt()</c> command, we must load the <c>Student[Calculus1]</c> package.
    Packages are loaded using the <c>with()</c> command and it is typically a good idea to load any necessary packages at the top of your worksheet.
    Loading a package only needs to be done once per Maple worksheet, but needs to be run each time you open a new or previously closed document.
    <idx><h>packages</h><h>Student[Calculus1]</h></idx>
  </p>
  <p>
    The function and interval must be specified. Other optional parameters may be included to change how the result is displayed and how the approximation is computed.
  </p>
  <table xml:id="tbl_approximateint_options">
    <title>A list of optional parameters for the <c>ApproximateInt()</c> command</title>
    <tabular>
      <col width="30%"/>
      <col width="60%"/>
      <row header="yes" bottom="medium">
        <cell>Parameter</cell>
        <cell>Description</cell>
      </row>
      <row>
        <cell><c>method = </c><em>method</em></cell>
        <cell><p>Select the method for approximation (<c>left</c>, <c>right</c>, <c>lower</c>, <c>upper</c>, <c>midpoint</c>, <c>trapezoid</c>, <c>simpson</c>).</p></cell>
      </row>
      <row>
        <cell><c>output = </c><em>output</em></cell>
        <cell><p>Change how the output is displayed (<c>plot</c>, <c>value</c>, <c>sum</c>).</p></cell>
      </row>
      <row>
        <cell><c>partition =  n </c></cell>
        <cell><p>Change the number of subintervals to use for approximation.</p></cell>
      </row>
      <row bottom="minor">
        <cell></cell>
        <cell></cell>
      </row>
    </tabular>
  </table>
  <p>
    Most of these methods of approximation are discussed in class: left-hand, right-hand, midpoint, trapezoid, and Simpson's rules.
  </p>
  <p>
    When using <c>method=upper</c> or <c>method=lower</c>, Maple approximates area using rectangles based off of the maximum or minimum
    value of the function in each subinterval, respectively. This can be useful to give upper and lower bounds on the true area 
    bounded by the function and the horizontal axis.
  </p>
  <example>
    <title>Approximating Area using Left-hand and Right-hand Rules</title>
    <p>
      In this example, we will approximate the signed area between <m>f(x) = 10 { e}^{-x}</m> and the <m>x</m>-axis using 
      left-hand and right-hand rectanges. First, we will see how Maple can give the approximate area using a specific number of 
      subintervals (which Maple calls a <c>partition</c>). These are two common methods that we learn when first calculating Riemann sums.
    </p>
    <p>
      To start, we will assign function, <m>f(x)</m>. and calculate some approximations.
      <idx><h>mathematical functions</h><h>exponential</h></idx>
    </p>
    <console prompt="> ">
      <input>f(x) := 10*exp(-x);</input>
    </console>
    <p>
      <me>
        \displaystyle f\, := \,x\mapsto 10\,{{ e}^{-x}}
      </me>
    </p>
    <p>
      We will start with using eight subintervals and approximate the area using left-hand and right-hand rectangles. The <c>method</c>
      needs to be specified as well as the number of partitions. Maple will give the exact value of this Riemann sum, which can be 
      converted to decimal using the <c>evalf()</c> command.
      <idx><h>evalf</h></idx>
      <idx><h>ditto operator</h></idx>
      <idx><h>integral approximation</h><h>Riemann sum</h></idx>
    </p>
    <console prompt="> ">
      <input>with(Student[Calculus1]):</input>
      <input>ApproximateInt(f(x), x = 0..4, method=left, output=value, partition=8); 
    evalf(%);</input>
    </console>
    <p>
      <me>
        \displaystyle 5+5\,{{ e}^{-1/2}}+5\,{{ e}^{-1}}+5\,{{ e}^{-3/2}}+5\,{{ e}^{-2}}+5\,{{ e}^{-5/2}}+5\,{{ e}^{-3}} +5\,{{ e}^{-7/2}}
      </me>
      <me>
        \displaystyle  12.47472497
      </me>
    </p>
    <console prompt="> ">
      <input>ApproximateInt(f(x), x = 0..4, method=right, output=value, partition=8);
    evalf(%);</input>
    </console>
    <p>
      <me>
        \displaystyle 5\,{{ e}^{-1/2}}+5\,{{ e}^{-1}}+5\,{{ e}^{-3/2}}+5\,{{ e}^{-2}}+5\,{{ e}^{-5/2}}+5\,{{ e}^{-3}}+5\,{{ e}^{-7/2}}+5\,{{ e}^{-4}}
      </me>
      <me>
        \displaystyle  7.566303166
      </me>
    </p>
    <p>
      If we wish to get the actual area under the curve, then we can use an arbitrary <m>n</m> rectangles and take the limit as <m>n\to\infty</m>.
      <idx><h>limit</h><h>at infinity</h></idx>
    </p>
    <aside>
      <p>
        In many cases, calculating the limit of this sum as <m>n\to\infty</m> is very numerically challenging and Maple may not output a numerical value.
        Using the <c>value(%)</c> command immediately after the <c>limit()</c> may help to convert the limit to a numerical result.
      </p>
    </aside>
    <console prompt="> ">
      <input>ApproximateInt(f(x), x = 0..4, method=left, output=sum, partition=n);
    limit(%, n = infinity); evalf(%);</input>
    </console>
    <p>
      <me>
        \displaystyle 4\,{\frac {1}{n}\sum _{i=0}^{n-1}10\,{{ e}^{-4\,{\frac {i}{n}}}}}
      </me>
      <me>
        \displaystyle 10-10\,{{ e}^{-4}}
      </me>
      <me>
        \displaystyle  9.816843611
      </me>
    </p>
  </example>
  <example>
    <title>Approximating the Area under </title>
    <p>
      In this example, we will approximate the signed area between <m>f(x) = x \sin(x)</m> and the <m>x</m>-axis using rectangle approximation.
      Unlike in the previous example, we will be using altenative methods for determining the height of the rectangle in each subinterval (or <c>partition</c>),
      such as <c>upper</c>, <c>lower</c>, and <c>midpoint</c>.
    </p>
    <p>
      We will start by assigning the function.
    </p>
    <console prompt="> ">
      <input>f(x) := x*sin(x);</input>
    </console>
    <p>
      <idx><h>mathematical functions</h><h>sine</h></idx>
      <me>
        \displaystyle f\, := \,x\mapsto x\sin \left( x \right)
      </me>
    </p>
    <p>
      The <c>method=upper</c> option always uses the maximum value of <m>f(x)</m> in each subinterval for the height of each rectangle.
      Below is a plot of the rectangles as well as the approximation of area given by the method when using ten subintervals.
      As you can see, this method gives a very deliberate overestimate of the actual area bouded by this function and the <m>x</m>-axis.
    </p>
    <console prompt="> ">
      <input>with(Student[Calculus1]):</input>
      <input>ApproximateInt(f(x), x=-3..3, method=upper, output=plot, partition=10);</input>
    </console>
    <image source="images/Riemann_Sumsplot2d1-eps-converted-to" width="50%"/>
    <console prompt="> ">
      <input>ApproximateInt(f(x), x=-3..3, method=upper, output=value, partition=10);</input>
    </console>
    <p>
      <me>
        \displaystyle  7.981170598
      </me>
    </p>
    <p>
      The <c>method=lower</c> option always uses the minimum value of <m>f(x)</m> in each subinterval for the height of each rectangle.
    </p>
    <console prompt="> ">
      <input>ApproximateInt(f(x), x=-3..3, method=lower, output=value, partition=10);</input>
    </console>
    <p>
      <me>
        \displaystyle  4.202044853
      </me>
    </p>
    <p>
      Finally, the midpoint rule uses the height of each rectangle as the value of the function at the midpoint in each subinterval.
      Below is a plot of twenty rectangles using the midpoint rule.
    </p>
    <console prompt="> ">
      <input>ApproximateInt(f(x), x=-3..3, method=midpoint,
    output=plot, partition=20);</input>
    </console>
    <image source="images/Riemann_Sumsplot2d2-eps-converted-to" width="50%"/>
  </example>
</section>